@page "/registerform/{Kind}/{Param?}"
@inject AuthService AuthService

@if (initialized)
{
	if (IsRegister())
	{
		activeTabLabel = TAB_LABEL_REGISTER;
	}
	else
	{
		activeTabLabel = TAB_LABEL_LOGIN;
	}
	<h1>@activeTabLabel</h1>

	<div class="content">

		<div class="requestform">

			<EditForm Model="loginInfo" OnValidSubmit="OnOK">

				<DataAnnotationsValidator />

				@{
					// 疑似タブ
					TabItem[] tabItems =
					{
						new TabItem(TAB_LABEL_REGISTER, "/registerform/register/" + Param),
						new TabItem(TAB_LABEL_LOGIN, "/registerform/login/" + Param),
					};
					@((MarkupString)ClientCommon.GenerateTabHeader(tabItems, activeTabLabel))
				}

				<div class="tab-content">

					@if (IsRegister() && !isAdminRegistered)
					{
						<div>管理者が登録されていないため、管理者を登録します。</div>
					}

					<table class="input-table">
						<tr>
							<td class="input-td">お名前</td>
							<td class="input-td">
								@if (IsRegister() && !isAdminRegistered)
								{
									<div>@YbdConstants.ADMIN_NAME<span class="supplement">（管理者の名前は @YbdConstants.ADMIN_NAME で固定です）</span></div>
								}
								else
								{
									<input class="input-general" type="text" @bind="loginInfo.Name" @ref="inputName" />
								}
							</td>
						</tr>
						<tr>
							<td class="input-td">パスワード</td>
							<td class="input-td"><input class="input-general" type="text" @bind="loginInfo.Password" @ref="inputPassword" /></td>
						</tr>
						@if (IsRegister())
						{
							<tr>
								<td class="input-td">確認のためパスワードを再度入力</td>
								<td class="input-td"><input class="input-general" type="text" @bind="confirmPassword" /></td>
							</tr>
						}
					</table>

				</div>

				<div class="actions">
					<button class="default-button" disabled="@isButtonDisabled">@activeTabLabel</button>
				</div>

				<div class="error-message">
					<ValidationSummary></ValidationSummary>
					<div>@result</div>
				</div>

			</EditForm>

		</div>

	</div>

}
else
{
	<div class="loading">Loading...</div>
}

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 新規ユーザー登録（"register"）かログイン（"login"）か
	[Parameter]
	public String? Kind { get; set; }

	// URL パラメーター
	[Parameter]
	public String? Param { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 描画が完了した
	// --------------------------------------------------------------------
	protected override async Task OnAfterRenderAsync(Boolean firstRender)
	{
		try
		{
			if (!initialized || prevKind == Kind)
			{
				return;
			}

			// アクティブな疑似タブ内の要素にフォーカスを当てる
			if (IsRegister() && !isAdminRegistered)
			{
				await inputPassword.FocusAsync();
			}
			else
			{
				await inputName.FocusAsync();
			}
			prevKind = Kind;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			isAdminRegistered = await AuthService.IsAdminRegisteredAsync();
			if (IsRegister() && !isAdminRegistered)
			{
				loginInfo.Name = YbdConstants.ADMIN_NAME;
			}
			initialized = true;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 定数
	// ====================================================================

	// 疑似タブのラベル
	private const String TAB_LABEL_REGISTER = "新規ユーザー登録";
	private const String TAB_LABEL_LOGIN = "ログイン";

	// ====================================================================
	// private 変数
	// ====================================================================

	// OnInitializedAsync() 完了前にも描画されるのを防止するためのフラグ
	private Boolean initialized;

	// 多重描画防止用
	private String? prevKind = ClientConstants.INIT_STRING;

	// 要素参照用
	private ElementReference inputName;
	private ElementReference inputPassword;

	// アクティブタブ
	private String activeTabLabel = String.Empty;

	// 管理者が登録されているか
	private Boolean isAdminRegistered;

	// 登録・ログイン情報
	private LoginInfo loginInfo = new();

	// パスワード再入力
	private String? confirmPassword;

	// ボタン無効化
	private Boolean isButtonDisabled;

	// 結果
	private String? result;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 登録フォームかどうか
	// --------------------------------------------------------------------
	private Boolean IsRegister()
	{
		return Kind == "register";
	}

	// --------------------------------------------------------------------
	// ログイン
	// --------------------------------------------------------------------
	private async Task<Boolean> LoginAsync()
	{
		try
		{
			String message = await AuthService.LoginAsync(loginInfo);
			if (!String.IsNullOrEmpty(message))
			{
				throw new Exception("ログインできませんでした。" + message + "やり直してください。");
			}
			return true;
		}
		catch (Exception excep)
		{
			result = excep.Message;
			StateHasChanged();
			return false;
		}
	}

	// --------------------------------------------------------------------
	// 有効な状態で登録ボタンクリック
	// --------------------------------------------------------------------
	private async Task OnOK()
	{
		try
		{
			isButtonDisabled = true;

			Boolean result;
			if (IsRegister())
			{
				result = await RegisterAsync();
			}
			else
			{
				result = await LoginAsync();
			}
			if (!result)
			{
				return;
			}
			NavigationManager.NavigateTo(RedirectUrl());
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
		finally
		{
			isButtonDisabled = false;
		}
	}

	// --------------------------------------------------------------------
	// リダイレクト先
	// --------------------------------------------------------------------
	private String RedirectUrl()
	{
		String redirect = String.Empty;

		// ログアウトページから来た場合はリダイレクトしない
		if (!String.IsNullOrEmpty(Param) && Param.IndexOf("logout") < 0)
		{
			// Param に "&" や "=" が含まれる場合があるため YbdCommon.AnalyzeQuery() は使えない
			Int32 pos = Param.IndexOf(ClientConstants.LOGIN_PARAM_REDIRECT + "=");
			if (pos >= 0)
			{
				redirect = Param.Substring(pos + ClientConstants.LOGIN_PARAM_REDIRECT.Length + 1);
			}
		}
		String url = "/" + Uri.UnescapeDataString(redirect);
		ClientCommon.DebugWriteLine("RedirectUrl() " + url);
		return url;
	}

	// --------------------------------------------------------------------
	// 新規ユーザー登録
	// --------------------------------------------------------------------
	private async Task<Boolean> RegisterAsync()
	{
		try
		{
			// 追加の確認
			if (String.IsNullOrEmpty(confirmPassword))
			{
				throw new Exception("確認のためパスワードを再度入力してください。");
			}
			if (loginInfo.Password != confirmPassword)
			{
				throw new Exception("確認のためパスワードが最初のパスワードと異なっています。");
			}

			String message = await AuthService.AddUserAsync(loginInfo);
			if (!String.IsNullOrEmpty(message))
			{
				throw new Exception("新規ユーザー登録できませんでした。" + message + "やり直してください。");
			}
			return true;
		}
		catch (Exception excep)
		{
			result = excep.Message;
			StateHasChanged();
			return false;
		}
	}

}
