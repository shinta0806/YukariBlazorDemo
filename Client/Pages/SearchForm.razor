@page "/searchform/{Detail?}"
@inject IJSRuntime JSRuntime

<div class="content">

	<div class="searchform">
		<EditForm Model="word" OnValidSubmit="OnOK">

			<DataAnnotationsValidator />

			@{
				// 疑似タブ
				TabItem[] tabItems =
				{
					new TabItem(TAB_LABEL_ANY_WORD, "/searchform"),
					new TabItem(TAB_LABEL_DETAIL, "/searchform/detail"),
				};

				if (String.IsNullOrEmpty(Detail))
				{
					// なんでも検索
					word.Type = SearchWordType.AnyWord;

					@((MarkupString)ClientCommon.GenerateTabHeader(tabItems, TAB_LABEL_ANY_WORD))
					<div class="tab-content">
						<table class="input-table">
							<tr>
								<td class="input-td">キーワード</td>
								<td class="input-td"><input class="input-general" id="keyword" type="text" @bind="word.AnyWord" @ref="inputAnyWord"/></td>
							</tr>
							<tr>
								<td class="input-td"></td>
								<td class="input-td"><div class="supplement">曲名、歌手名、タイアップ名、ファイル名などの一部をキーワードにして検索できます（フリガナも可）。<br />スペースで区切って複数のキーワードを入力すると AND 検索（絞り込み検索）ができます。<br />「mp4」をキーワードにすると多くの動画を検索できます。</div></td>
							</tr>
						</table>
					</div>
				}
				else
				{
					// 詳細検索
					word.Type = SearchWordType.Detail;

					// ToDo: @bind="word.DetailValues[i]" がうまくいかない
					@((MarkupString)ClientCommon.GenerateTabHeader(tabItems, TAB_LABEL_DETAIL))
					<div class="tab-content" id="detail-content">
						<table class="input-table">
							<tr>
								<td class="input-td">曲名</td>
								<td class="input-td"><input class="input-general" id="song-name" type="text" @bind="word.SongName" @ref="inputSongName"/></td>
							</tr>
							<tr>
								<td class="input-td">タイアップ名</td>
								<td class="input-td"><input class="input-general" type="text" @bind="word.TieUpName" /></td>
							</tr>
							<tr>
								<td class="input-td">歌手名</td>
								<td class="input-td"><input class="input-general" type="text" @bind="word.ArtistName" /></td>
							</tr>
							<tr>
								<td class="input-td">制作会社</td>
								<td class="input-td"><input class="input-general" type="text" @bind="word.MakerName" /></td>
							</tr>
							<tr>
								<td class="input-td">カラオケ動画制作者</td>
								<td class="input-td"><input class="input-general" type="text" @bind="word.Worker" /></td>
							</tr>
							<tr>
								<td class="input-td">ファイル名</td>
								<td class="input-td"><input class="input-general" type="text" @bind="word.Path" /></td>
							</tr>
						</table>
					</div>
				}
			}

			<div class="actions">
				<button class="default-button">検索</button>
			</div>

			<div class="error-message">
				<ValidationSummary displaymode="SingleParagraph"></ValidationSummary>
			</div>
		</EditForm>
	</div>

</div>

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 詳細検索かどうか
	[Parameter]
	public String? Detail { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 描画が完了した
	// --------------------------------------------------------------------
	protected override async Task OnAfterRenderAsync(Boolean firstRender)
	{
		try
		{
			if (prevDetail == Detail)
			{
				return;
			}

			// アクティブな疑似タブ内の要素にフォーカスを当てる
			if (word.Type == SearchWordType.AnyWord)
			{
				await inputAnyWord.FocusAsync();
			}
			else
			{
				await inputSongName.FocusAsync();
			}

			prevDetail = Detail;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 定数
	// ====================================================================

	// 疑似タブのラベル
	private const String TAB_LABEL_ANY_WORD = "なんでも検索";
	private const String TAB_LABEL_DETAIL = "詳細検索";

	// ====================================================================
	// private 変数
	// ====================================================================

	// 検索条件
	private SearchWord word = new SearchWord();

	// 多重描画防止用
	private String? prevDetail = "__Init__";

	// 要素参照用
	private ElementReference inputAnyWord;
	private ElementReference inputSongName;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 有効な状態で検索ボタンクリック
	// --------------------------------------------------------------------
	private void OnOK()
	{
		NavigationManager.NavigateTo($"/searchresult/{word}");
	}


}


