@page "/searchresult/{Query?}"
@using System.IO;
@using System.Web
@using System.Text
@inject NavigationManager NavigationManager
@inject SearchService SearchService

@{
	<h1>検索結果（@availableSongs.Count() 件）</h1>
}

<div class="content">

	@{
		// 検索条件表示
		String condition = String.Empty;
		if (searchWord.Type == SearchWordType.AnyWord)
		{
			AddCondition(ref condition, "キーワード", searchWord.AnyWord);
		}
		else
		{
			for (Int32 i = 0; i < (Int32)SearchDetailCondition.__End__; i++)
			{
				AddCondition(ref condition, YbdConstants.SEARCH_DETAIL_CONDITION_NAMES[i], searchWord.DetailValues[i]);
			}
		}
		@((MarkupString)condition)

		// 案内
		@if (availableSongs.Count() == 0)
		{
			<div>曲が見つかりませんでした。検索条件を変えて検索してください。</div>
		}
		else
		{
			<div>予約したい曲をクリックしてください。</div>
		}

		// 検索方法のアクティブタブ
		String typeActiveTab = "すべて";
		String typeActiveKeyword = String.Empty;
		if (searchWord.IsValid(out String? errorMessage))
		{
			if (searchWord.Type == SearchWordType.AnyWord)
			{
				typeActiveKeyword = searchWord.AnyWord;
			}
			else
			{
				Int32 numConditions = searchWord.DetailValues.Where(x => x != String.Empty).Count();
				if (numConditions == 1)
				{
					if (!String.IsNullOrEmpty(searchWord.SongName))
					{
						typeActiveTab = "曲名";
						typeActiveKeyword = searchWord.SongName;
					}
					else if (!String.IsNullOrEmpty(searchWord.TieUpName))
					{
						typeActiveTab = "タイアップ名";
						typeActiveKeyword = searchWord.TieUpName;
					}
					else if (!String.IsNullOrEmpty(searchWord.ArtistName))
					{
						typeActiveTab = "歌手名";
						typeActiveKeyword = searchWord.ArtistName;
					}
				}
				else
				{
					typeActiveKeyword = searchWord.DetailValues.Where(x => x != String.Empty).First();
				}
			}
		}

		// 検索方法タブ
		TabItem[] typeTabItems =
	{
			new TabItem("すべて", "/searchresult/" + YbdConstants.SEARCH_PARAM_NAME_ANY_WORD + "=" + HttpUtility.UrlEncode(typeActiveKeyword, Encoding.UTF8)),
			new TabItem("曲名", "/searchresult/" + YbdConstants.SEARCH_DETAIL_PARAM_NAMES[(Int32)SearchDetailCondition.SongName] + "=" + HttpUtility.UrlEncode(typeActiveKeyword, Encoding.UTF8)),
			new TabItem("タイアップ名", "/searchresult/" + YbdConstants.SEARCH_DETAIL_PARAM_NAMES[(Int32)SearchDetailCondition.TieUpName] + "=" + HttpUtility.UrlEncode(typeActiveKeyword, Encoding.UTF8)),
			new TabItem("歌手名", "/searchresult/" + YbdConstants.SEARCH_DETAIL_PARAM_NAMES[(Int32)SearchDetailCondition.ArtistName] + "=" + HttpUtility.UrlEncode(typeActiveKeyword, Encoding.UTF8)),
		};
		@((MarkupString)ClientCommon.GenerateTabHeader(typeTabItems, typeActiveTab))

		// ソートタブ
		TabItem[] sortTabItems =
		{
			new TabItem("新着順", "/searchresult/" + ChangeSort(searchWord, SearchResultSort.Latest)),
			new TabItem("曲名順", "/searchresult/" + ChangeSort(searchWord, SearchResultSort.SongName)),
			new TabItem("歌手名順", "/searchresult/" + ChangeSort(searchWord, SearchResultSort.ArtistName)),
			new TabItem("サイズ順", "/searchresult/" + ChangeSort(searchWord, SearchResultSort.FileSize)),
		};
		@((MarkupString)ClientCommon.GenerateTabHeader(sortTabItems,YbdConstants. SEARCH_RESULT_SORT_NAMES[(Int32)searchWord.Sort]))
	}

	<div class="tab-content">

		<table class="search-result-table">
			@foreach (AvailableSong availableSong in availableSongs)
			{
				<tr class="req-list-tr-unplayed" @key="@availableSong.Id">
					<td class="req-list-td"><div class="req-list-thumb"><img src="/api/thumbnail/@HttpUtility.UrlEncode(availableSong.Path, Encoding.UTF8)" /></div></td>
					<td class="req-list-td" @onclick="() => OnClickRequest(availableSong)">
						<div class="search-result-song">@availableSong.SongName</div>
						@{
							String misc = availableSong.ArtistName;
							if (!String.IsNullOrEmpty(availableSong.TieUpName))
							{
								misc += " / " + availableSong.TieUpName;
							}
						}
						<div class="req-list-misc">@misc</div>
						<div class="req-list-path">@Path.GetFileName(availableSong.Path.Replace('\\', '/'))</div>
					</td>
					<td class="req-list-td"><div class="req-list-misc">@(availableSong.FileSize/1024/1024) MB</div></td>
				</tr>
			}
		</table>

	</div>

</div>

@{
	renderedQuery = Query;
}

@code {
	[Parameter]
	public String? Query { get; set; }

	private String? renderedQuery;

	private SearchWord searchWord = new();

	private IEnumerable<AvailableSong> availableSongs = new AvailableSong[0];

	protected override async Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(renderedQuery) && renderedQuery != Query)
		{
			searchWord = new SearchWord(Query);
			availableSongs = await SearchService.SearchByWordAsync(Query);
			StateHasChanged();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			searchWord = new SearchWord(Query);
			availableSongs = await SearchService.SearchByWordAsync(Query);
		}
		catch (Exception excep)
		{
			Debug.WriteLine(excep.Message);
			Debug.WriteLine(excep.StackTrace);
		}
	}

	private void OnClickRequest(AvailableSong availableSong)
	{
		NavigationManager.NavigateTo($"/requestform/{availableSong.Id}");
	}

	private void AddCondition(ref String str, String condName, String condValue)
	{
		if (String.IsNullOrEmpty(condValue))
		{
			return;
		}

		if (!String.IsNullOrEmpty(str))
		{
			str += "<span class='condition-name'>, </span>";
		}
		str += "<span class='condition-name'>" + condName + "：</span><span class='condition-value'>" + HttpUtility.HtmlEncode(condValue) + "</span>";
	}

	private SearchWord ChangeSort(SearchWord searchWord, SearchResultSort sort)
	{
		SearchWord change = searchWord.DeepCopy();
		change.Sort = sort;
		return change;
	}


}
