@page "/searchresult/{Query?}"
@using System.IO
@using System.Web
@using System.Threading
@using System.Text
@inject SearchService SearchService

@if (initialized)
{
	<h1>検索結果（@numResults 件）</h1>

	<div class="content">

		@{
			// 検索条件表示
			String condition = String.Empty;
			if (searchWord.Type == SearchWordType.AnyWord)
			{
				AddCondition(ref condition, "キーワード", searchWord.AnyWord);
			}
			else
			{
				for (Int32 i = 0; i < (Int32)SearchDetailCondition.__End__; i++)
				{
					AddCondition(ref condition, YbdConstants.SEARCH_DETAIL_CONDITION_NAMES[i], searchWord.DetailValues[i]);
				}
			}
			@((MarkupString)condition)

			// 案内
			@if (availableSongs.Count() == 0)
			{
				<div>曲が見つかりませんでした。検索条件を変えて検索してください。</div>
			}
			else
			{
				<div>予約したい曲をクリックしてください。</div>
			}

			// 検索方法疑似タブ
			String typeActiveTab;
			TabItem[] typeTabItems =
			{
				new TabItem(YbdConstants.SEARCH_ANY_WORD_CONDITION_NAME,
						"/searchresult/" + searchWord.ChangeType(SearchWordType.AnyWord, 0, out typeActiveTab)),
				new TabItem(YbdConstants.SEARCH_DETAIL_CONDITION_NAMES[(Int32)SearchDetailCondition.SongName],
						"/searchresult/" + searchWord.ChangeType(SearchWordType.Detail, SearchDetailCondition.SongName, out typeActiveTab)),
				new TabItem(YbdConstants.SEARCH_DETAIL_CONDITION_NAMES[(Int32)SearchDetailCondition.TieUpName],
						"/searchresult/" + searchWord.ChangeType(SearchWordType.Detail, SearchDetailCondition.TieUpName, out typeActiveTab)),
				new TabItem(YbdConstants.SEARCH_DETAIL_CONDITION_NAMES[(Int32)SearchDetailCondition.ArtistName],
						"/searchresult/" + searchWord.ChangeType(SearchWordType.Detail, SearchDetailCondition.ArtistName, out typeActiveTab)),
			};
			@((MarkupString)ClientCommon.GenerateTabHeader(typeTabItems, typeActiveTab))

			// ソート疑似タブ
			TabItem[] sortTabItems =
			{
				new TabItem(YbdConstants.SEARCH_RESULT_SORT_NAMES[(Int32)SearchResultSort.Latest], "/searchresult/" + searchWord.ChangeSort(SearchResultSort.Latest)),
				new TabItem(YbdConstants.SEARCH_RESULT_SORT_NAMES[(Int32)SearchResultSort.SongName], "/searchresult/" + searchWord.ChangeSort(SearchResultSort.SongName)),
				new TabItem(YbdConstants.SEARCH_RESULT_SORT_NAMES[(Int32)SearchResultSort.ArtistName], "/searchresult/" + searchWord.ChangeSort(SearchResultSort.ArtistName)),
				new TabItem(YbdConstants.SEARCH_RESULT_SORT_NAMES[(Int32)SearchResultSort.FileSize], "/searchresult/" + searchWord.ChangeSort(SearchResultSort.FileSize)),
			};
			@((MarkupString)ClientCommon.GenerateTabHeader(sortTabItems,YbdConstants. SEARCH_RESULT_SORT_NAMES[(Int32)searchWord.Sort]))
		}

		<div class="tab-content">

			<table class="search-result-table">
				@foreach (AvailableSong availableSong in availableSongs)
				{
					<tr class="req-list-tr-unplayed" @key="@availableSong.Id">
						<td class="req-list-td"><div class="req-list-thumb"><img src="/@(YbdConstants.URL_API + YbdConstants.URL_MOVIE_THUMBNAIL + Uri.EscapeDataString(availableSong.Id))" /></div></td>
						<td class="req-list-td" @onclick="() => OnClickRequest(availableSong)">
							<div class="search-result-song">@availableSong.SongName</div>
							@{
								String misc = availableSong.ArtistName;
								if (!String.IsNullOrEmpty(availableSong.TieUpName))
								{
									misc += " / " + availableSong.TieUpName;
								}
							}
							<div class="req-list-misc">@misc</div>
							<div class="req-list-path">@Path.GetFileName(availableSong.Path.Replace('\\', '/'))</div>
						</td>
						<td class="req-list-td"><div class="req-list-misc">@(availableSong.FileSize/1024/1024) MB</div></td>
					</tr>
				}
			</table>

		</div>

		@((MarkupString)ClientCommon.GeneratePageNavigation((numResults + YbdConstants.PAGE_SIZE - 1)/ YbdConstants.PAGE_SIZE, searchWord.Page, "/searchresult/" + searchWord.ResetPage()))

	</div>

	prevQuery = Query;
}
else
{
	<div class="loading">Loading...</div>
}

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 検索条件
	[Parameter]
	public String? Query { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await SearchAsync();
			initialized = true;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// パラメーター類がセットされた
	// --------------------------------------------------------------------
	protected override async Task OnParametersSetAsync()
	{
		try
		{
			if (initialized && prevQuery != Query)
			{
				// 疑似タブクリックにより検索条件が変更されたため再度検索
				await SearchAsync();
				StateHasChanged();
			}
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 定数
	// ====================================================================

	// ====================================================================
	// private 変数
	// ====================================================================

	// OnInitializedAsync() 完了前にも描画されるため、後続で検索結果が来る場合でも少しの間「検索結果 0 件」が表示されてしまう
	// それを防止するためのフラグ
	private Boolean initialized;

	// 多重描画防止用
	private String? prevQuery;

	// 検索条件
	private SearchWord searchWord = new();

	// 検索結果
	private AvailableSong[] availableSongs = new AvailableSong[0];

	// 検索結果の総数
	private Int32 numResults;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 検索条件表示用文字列作成
	// --------------------------------------------------------------------
	private void AddCondition(ref String str, String condName, String condValue)
	{
		if (String.IsNullOrEmpty(condValue))
		{
			return;
		}

		if (!String.IsNullOrEmpty(str))
		{
			str += "<span class='condition-name'>, </span>";
		}
		str += "<span class='condition-name'>" + condName + "：</span><span class='condition-value'>" + HttpUtility.HtmlEncode(condValue) + "</span>";
	}

	// --------------------------------------------------------------------
	// 予約リンククリック
	// --------------------------------------------------------------------
	private void OnClickRequest(AvailableSong availableSong)
	{
		NavigationManager.NavigateTo($"/requestform/{availableSong.Id}");
	}

	// --------------------------------------------------------------------
	// 検索結果を格納
	// --------------------------------------------------------------------
	private async Task SearchAsync()
	{
		searchWord = new SearchWord(Query);
		(availableSongs, numResults) = await SearchService.SearchByWordAsync(Query);
	}


}
