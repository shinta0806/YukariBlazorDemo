@page "/player"
@inject NavigationManager NavigationManager
@inject PlayerService PlayerService

<div class="content">

	<div class="tab-content">
		<div class="player-status">@playStatus</div>
		<div>@playingSongName</div>
	</div>

	<form>
		<div class="actions">
			<button class="general-button" type="button" @onclick="OnClickPrev">&#9665;&#9665;　前の曲</button>
			<button class="default-button" type="button" @onclick="OnClickPlayOrPause">&#9654;　再生／一時停止</button>
			<button class="general-button" type="button" @onclick="OnClickNext">&#9655;&#9655;　次の曲</button>
		</div>
	</form>

	<div>@playResult</div>

</div>

@code {

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await UpdateStatusAsync();
		}
		catch (Exception)
		{
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// 再生中（または一時停止中）の曲
	private RequestSong? playingSong;

	// 再生中（または一時停止中）の曲名
	private String? playingSongName;

	// 再生状態（停止～再生）
	private String? playStatus;

	// 再生操作結果メッセージ
	private String? playResult;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 次の曲ボタンクリック
	// --------------------------------------------------------------------
	private async void OnClickNext()
	{
		try
		{
			HttpResponseMessage message = await PlayerService.NextAsync();
			if (message.IsSuccessStatusCode)
			{
				await UpdateStatusAsync();
			}
			else
			{
				playResult = "次の曲を再生できませんでした。未再生の曲があるか確認してください。";
			}
			StateHasChanged();
		}
		catch (Exception)
		{
		}
	}

	// --------------------------------------------------------------------
	// 再生／一時停止ボタンクリック
	// --------------------------------------------------------------------
	private async void OnClickPlayOrPause()
	{
		try
		{
			HttpResponseMessage message = await PlayerService.PlayOrPauseAsync();
			if (message.IsSuccessStatusCode)
			{
				await UpdateStatusAsync();
			}
			else
			{
				playResult = "再生／一時停止できませんでした。曲が予約されているか確認してください。";
			}
			StateHasChanged();
		}
		catch (Exception)
		{
		}
	}

	// --------------------------------------------------------------------
	// 前の曲ボタンクリック
	// --------------------------------------------------------------------
	private async void OnClickPrev()
	{
		try
		{
			HttpResponseMessage message = await PlayerService.PrevAsync();
			if (message.IsSuccessStatusCode)
			{
				await UpdateStatusAsync();
			}
			else
			{
				playResult = "前の曲を再生できませんでした。曲が予約されているか確認してください。";
			}
			StateHasChanged();
		}
		catch (Exception)
		{
		}
	}

	// --------------------------------------------------------------------
	// 再生情報を更新
	// --------------------------------------------------------------------
	private async Task UpdateStatusAsync()
	{
		playingSong = await PlayerService.GetPlayingSongAsync();
		if (playingSong == null)
		{
			playStatus = "停止中";
		}
		else
		{
			if (playingSong.PlayStatus == PlayStatus.Playing)
			{
				playStatus = "再生中";
			}
			else
			{
				playStatus = "一時停止中";
			}
			playingSongName = playingSong.SongName;
		}
	}



}
