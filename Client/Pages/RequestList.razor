@page "/{Query?}"
@inject IJSRuntime JSRuntime
@inject PlayerService PlayerService
@inject RequestSongService RequestSongService
@using System
@using System.IO
@using System.Text
@using System.Web

@{
	Debug.Assert(YbdConstants.SEARCH_DETAIL_CONDITION_NAMES.Length == (Int32)SearchDetailCondition.__End__, "bad SEARCH_DETAIL_CONDITION_NAMES length.");
	Debug.Assert(YbdConstants.SEARCH_DETAIL_PARAM_NAMES.Length == (Int32)SearchDetailCondition.__End__, "bad SEARCH_DETAIL_PARAM_NAMES length.");
	Debug.Assert(YbdConstants.SEARCH_RESULT_SORT_NAMES.Length == (Int32)SearchResultSort.__End__, "bad SEARCH_RESULT_SORT_NAMES length.");
}

@if (initialized)
{
	<div class="content">

		@if (numRequests > 0)
		{
			<table class="req-list-table">
				<tr class="req-list-tr">
					<th class="req-list-th">No.</th>
					<th class="req-list-th">サムネイル</th>
					<th class="req-list-th">曲名</th>
					<th class="req-list-th">予約者</th>
					<th class="req-list-th">コメント</th>
					<th class="req-list-th">操作</th>
				</tr>

				@foreach (RequestSong requestSong in requestSongs)
				{
					String trClassName;
					String playIcon = String.Empty;
					switch (requestSong.PlayStatus)
					{
						case PlayStatus.Unplayed:
							trClassName = "req-list-tr-unplayed";
							break;
						case PlayStatus.Playing:
							trClassName = "req-list-tr-playing";
							playIcon = "<span class='play-icon'>&#9654;</span>";
							break;
						case PlayStatus.Pause:
							trClassName = "req-list-tr-pause";
							playIcon = "<span class='play-icon'>||</span>";
							break;
						default:
							trClassName = "req-list-tr-played";
							break;
					}

					<tr class="@trClassName" @key="requestSong.RequestSongId">
						<td class="req-list-td"><div class="req-list-no">@((MarkupString)playIcon)@requestSong.Sort</div></td>
						<td class="req-list-td"><div class="req-list-thumb"><img src="/@(YbdConstants.URL_API + YbdConstants.URL_MOVIE + YbdConstants.URL_THUMBNAIL + @Uri.EscapeDataString(requestSong.AvailableSongId))" /></div></td>
						<td class="req-list-td">
							<div class="req-list-song">@requestSong.SongName</div>
							@{
								String misc = requestSong.ArtistName;
								if (!String.IsNullOrEmpty(requestSong.TieUpName))
								{
									misc += " / " + requestSong.TieUpName;
								}
							}
							<div class="req-list-misc">@misc</div>
							<div class="req-list-path">@Path.GetFileName(requestSong.Path.Replace('\\', '/'))</div>
						</td>
						<td class="req-list-td">
							@if (!String.IsNullOrEmpty(requestSong.UserId))
							{
								<div><img class="user-thumbnail" src="/@(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_PUBLIC + YbdConstants.URL_THUMBNAIL + requestSong.UserId)" /></div>
							}
							<div class="center">@requestSong.UserName</div>
						</td>
						<td class="req-list-td">@requestSong.Comment</td>
						<td class="req-list-td">
							<select @onchange="e => OnChangeListAction(requestSong, e)">
								<option>予約操作</option>
								<option disabled>-----</option>
								<option value="@LIST_ACTION_UP">上へ</option>
								<option value="@LIST_ACTION_DOWN">下へ</option>
								<option value="@LIST_ACTION_NEXT">次に再生</option>
								<option disabled>-----</option>
								<option value="@LIST_ACTION_UNPLAYED">未再生にする</option>
								<option value="@LIST_ACTION_PLAYED">再生済にする</option>
								<option disabled>-----</option>
								<option value="@LIST_ACTION_DELETE">削除</option>
							</select>
						</td>
					</tr>
				}
			</table>

			<div id="action-result" class="error-message">@actionResult</div>

			@((MarkupString)ClientCommon.GeneratePageNavigation((numRequests + YbdConstants.PAGE_SIZE - 1)/ YbdConstants.PAGE_SIZE, currentPage, "/"))
		}
		else
		{
			<div>予約がありません。</div>
		}

	</div>

	prevQuery = Query;
}
else
{
	<div class="loading">Loading...</div>
}

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 検索条件
	[Parameter]
	public String? Query { get; set; }

	// ====================================================================
	// public 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// Server-Sent Events 受信
	// --------------------------------------------------------------------
	[JSInvokable]
	public async Task OnSse(String data)
	{
		ClientCommon.DebugWriteLine("OnSse() " + data);
		if (data != YbdConstants.SSE_DATA_REQUEST_CHANGED)
		{
			return;
		}
		await GetRequestAsync();
		StateHasChanged();
	}

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await JSRuntime.InvokeVoidAsync("CreateEventSource", DotNetObjectReference.Create(this));
			await GetRequestAsync();
			initialized = true;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// パラメーター類がセットされた
	// --------------------------------------------------------------------
	protected override async Task OnParametersSetAsync()
	{
		try
		{
			if (initialized && prevQuery != Query)
			{
				// ページナビゲーションクリックにより取得条件が変更されたため再度取得
				await GetRequestAsync();
				StateHasChanged();
			}
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 定数
	// ====================================================================

	// 上へ
	private const String LIST_ACTION_UP = "up";

	// 下へ
	private const String LIST_ACTION_DOWN = "down";

	// 次に再生
	private const String LIST_ACTION_NEXT = "next";

	// 未再生にする
	private const String LIST_ACTION_UNPLAYED = "unplayed";

	// 再生済にする
	private const String LIST_ACTION_PLAYED = "played";

	// 削除
	private const String LIST_ACTION_DELETE = "delete";

	// ====================================================================
	// private 変数
	// ====================================================================

	// OnInitializedAsync() 完了前にも描画されるため、後続で予約一覧が来る場合でも少しの間「予約がありません」が表示されてしまう
	// それを防止するためのフラグ
	private Boolean initialized;

	// 多重描画防止用
	private String? prevQuery;

	// 予約曲群
	private RequestSong[] requestSongs = new RequestSong[0];

	// 予約の総数
	private Int32 numRequests;

	// 現在表示中のページ
	private Int32 currentPage;

	// 操作結果
	private String? actionResult;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 予約一覧を取得する
	// --------------------------------------------------------------------
	private async Task GetRequestAsync()
	{
		Dictionary<String, String> parameters = YbdCommon.AnalyzeQuery(Query);
		currentPage = YbdCommon.GetPageFromQueryParameters(parameters);
		(requestSongs, numRequests) = await RequestSongService.GetRequestSongsAsync(Query);
	}

	// --------------------------------------------------------------------
	// リスト操作
	// --------------------------------------------------------------------
	private async Task OnChangeListAction(RequestSong requestSong, ChangeEventArgs e)
	{
		try
		{
			actionResult = null;
			switch (e.Value)
			{
				case LIST_ACTION_UP:
					ClientCommon.ThrowIfError(await RequestSongService.MoveUpRequestSongAsync(requestSong.RequestSongId));
					break;
				case LIST_ACTION_DOWN:
					ClientCommon.ThrowIfError(await RequestSongService.MoveDownRequestSongAsync(requestSong.RequestSongId));
					break;
				case LIST_ACTION_NEXT:
					ClientCommon.ThrowIfError(await RequestSongService.MoveNextRequestSongAsync(requestSong.RequestSongId));
					break;
				case LIST_ACTION_PLAYED:
					ClientCommon.ThrowIfError(await PlayerService.Played(requestSong.RequestSongId));
					break;
				case LIST_ACTION_UNPLAYED:
					ClientCommon.ThrowIfError(await PlayerService.Unplayed(requestSong.RequestSongId));
					break;
				case LIST_ACTION_DELETE:
					Boolean confirm = await ClientCommon.ConfirmAsync(JSRuntime, "予約「" + requestSong.SongName + "」を削除してもよろしいですか？");
					if (!confirm)
					{
						return;
					}
					ClientCommon.ThrowIfError(await RequestSongService.DeleteRequestSongAsync(requestSong.RequestSongId));
					break;
				default:
					return;
			}
			await GetRequestAsync();
		}
		catch (Exception excep)
		{
			actionResult = excep.Message;
		}
		StateHasChanged();

		// 再描画後も select の内容が維持されているのでクリアする
		await JSRuntime.InvokeVoidAsync("ClearSelectSelections");
	}

}
