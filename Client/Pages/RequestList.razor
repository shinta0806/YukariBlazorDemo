@page "/{Query?}"
@inject NavigationManager NavigationManager
@inject RequestSongService RequestSongService
@using System
@using System.IO
@using System.Text
@using System.Web

@{
	Debug.Assert(YbdConstants.SEARCH_DETAIL_CONDITION_NAMES.Length == (Int32)SearchDetailCondition.__End__, "bad SEARCH_DETAIL_CONDITION_NAMES length.");
	Debug.Assert(YbdConstants.SEARCH_DETAIL_PARAM_NAMES.Length == (Int32)SearchDetailCondition.__End__, "bad SEARCH_DETAIL_PARAM_NAMES length.");
	Debug.Assert(YbdConstants.SEARCH_RESULT_SORT_NAMES.Length == (Int32)SearchResultSort.__End__, "bad SEARCH_RESULT_SORT_NAMES length.");
}

@if (initialized)
{
	<div class="content">

		@if (numRequests > 0)
		{
			<table class="req-list-table">
				<tr class="req-list-tr">
					<th class="req-list-th">No.</th>
					<th class="req-list-th">サムネイル</th>
					<th class="req-list-th">曲名</th>
					<th class="req-list-th">予約者</th>
					<th class="req-list-th">コメント</th>
				</tr>

				@foreach (RequestSong requestSong in requestSongs)
				{
					String trClassName;
					String playIcon = String.Empty;
					switch (requestSong.PlayStatus)
					{
						case PlayStatus.Unplayed:
							trClassName = "req-list-tr-unplayed";
							break;
						case PlayStatus.Playing:
							trClassName = "req-list-tr-playing";
							playIcon = "<span class='play-icon'>&#9654;</span>";
							break;
						case PlayStatus.Pause:
							trClassName = "req-list-tr-pause";
							playIcon = "<span class='play-icon'>||</span>";
							break;
						default:
							trClassName = "req-list-tr-played";
							break;
					}

					<tr class="@trClassName" @key="requestSong.RequestSongId">
						<td class="req-list-td"><div class="req-list-no">@((MarkupString)playIcon)@requestSong.Sort</div></td>
						<td class="req-list-td"><div class="req-list-thumb"><img src="/api/thumbnail/@Uri.EscapeDataString(requestSong.AvailableSongId)" /></div></td>
						<td class="req-list-td">
							<div class="req-list-song">@requestSong.SongName</div>
							@{
								String misc = requestSong.ArtistName;
								if (!String.IsNullOrEmpty(requestSong.TieUpName))
								{
									misc += " / " + requestSong.TieUpName;
								}
							}
							<div class="req-list-misc">@misc</div>
							<div class="req-list-path">@Path.GetFileName(requestSong.Path.Replace('\\', '/'))</div>
						</td>
						<td class="req-list-td">@requestSong.User</td>
						<td class="req-list-td">@requestSong.Comment</td>
					</tr>
				}
			</table>

			@((MarkupString)ClientCommon.GeneratePageNavigation((numRequests + YbdConstants.PAGE_SIZE - 1)/ YbdConstants.PAGE_SIZE, currentPage, "/"))
		}
		else
		{
			<div>予約がありません。</div>
		}

	</div>

	prevQuery = Query;
}
else
{
	<div class="loading">Loading...</div>
}

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 検索条件
	[Parameter]
	public String? Query { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await GetRequestAsync();
			initialized = true;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// パラメーター類がセットされた
	// --------------------------------------------------------------------
	protected override async Task OnParametersSetAsync()
	{
		try
		{
			if (initialized && prevQuery != Query)
			{
				// ページナビゲーションクリックにより取得条件が変更されたため再度取得
				await GetRequestAsync();
				StateHasChanged();
			}
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// OnInitializedAsync() 完了前にも描画されるため、後続で予約一覧が来る場合でも少しの間「予約がありません」が表示されてしまう
	// それを防止するためのフラグ
	private Boolean initialized;

	// 多重描画防止用
	private String? prevQuery;

	// 予約曲群
	private RequestSong[] requestSongs = new RequestSong[0];

	// 予約の総数
	private Int32 numRequests;

	// 現在表示中のページ
	private Int32 currentPage;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 予約一覧を取得する
	// --------------------------------------------------------------------
	private async Task GetRequestAsync()
	{
		Dictionary<String, String> parameters = YbdCommon.AnalyzeQuery(Query);
		currentPage = YbdCommon.GetPageFromQueryParameters(parameters);
		(requestSongs, numRequests) = await RequestSongService.GetRequestSongsAsync(Query);
	}

}
