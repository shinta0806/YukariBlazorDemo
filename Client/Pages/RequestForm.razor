@page "/requestform/{AvailableSongId?}"
@inject IJSRuntime JSRuntime
@inject RequestSongService RequestSongService
@inject SearchService SearchService

<h1>予約</h1>

@if (initialized)
{
	<div class="content">

		@if (availableSong != null)
		{
			<div class="requestform">
				<EditForm Model="requestSong" OnValidSubmit="OnOK">

					<DataAnnotationsValidator />

					<div class="tab-content">

						<table class="input-table">
							<tr>
								<td class="input-td">サムネイル</td>
								<td class="input-td"><img src="/api/thumbnail/@Uri.EscapeDataString(requestSong.AvailableSongId)" /></td>
							</tr>
							<tr>
								<td class="input-td">曲名</td>
								<td class="input-td"><div class="req-list-song">@requestSong.SongName</div></td>
							</tr>
							<tr>
								<td class="input-td">タイアップ名</td>
								<td class="input-td">@requestSong.TieUpName</td>
							</tr>
							<tr>
								<td class="input-td">歌手名</td>
								<td class="input-td">@requestSong.ArtistName</td>
							</tr>
							<tr>
								<td class="input-td">制作会社</td>
								<td class="input-td">@requestSong.MakerName</td>
							</tr>
							<tr>
								<td class="input-td">カラオケ動画制作者</td>
								<td class="input-td">@requestSong.Worker</td>
							</tr>
							<tr>
								<td class="input-td">ファイル名</td>
								<td class="input-td"><div class="req-list-path">@requestSong.Path</div></td>
							</tr>
							<tr>
								<td class="input-td">予約者</td>
								<td class="input-td">
									<select class="input-narrow" @bind="requestSong.User">
										<option value="">新規（入力→）</option>
										@foreach (String userName in userNames)
										{
											<option value="@userName">@userName</option>
										}
									</select>
									<input class="input-narrow" id="user" type="text" @bind="requestSong.User" @ref="inputUser" />
								</td>
							</tr>
							<tr>
								<td class="input-td">コメント</td>
								<td class="input-td"><input class="input-general" type="text" @bind="requestSong.Comment" /></td>
							</tr>
						</table>

					</div>

					<div class="actions">
						<button class="default-button">予約</button>
					</div>

					<div class="error-message">
						<ValidationSummary></ValidationSummary>
					</div>

				</EditForm>

				<div>@requestResult</div>

			</div>
		}
		else
		{
			<div>予約対象の曲がありません。予約をやり直してください。</div>
		}
	</div>
}
else
{
	<div class="loading">Loading...</div>
}

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 予約する曲の ID
	[Parameter]
	public String? AvailableSongId { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 描画が完了した
	// --------------------------------------------------------------------
	protected override async Task OnAfterRenderAsync(Boolean firstRender)
	{
		try
		{
			if (initialized && availableSong != null && !focused)
			{
				await inputUser.FocusAsync();
				focused = true;
			}
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			availableSong = await SearchService.SearchByIdAsync(AvailableSongId);
			Int32 temp;
			(userNames, temp) = await RequestSongService.GetUserNamesAsync();
			initialized = true;

			if (availableSong == null)
			{
				return;
			}
			ClientCommon.CopySongProperty(availableSong, requestSong);
			requestSong.AvailableSongId = availableSong.Id;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// OnInitializedAsync() 完了前にも描画されるため、後続で検索結果が来る場合でも少しの間「検索結果 0 件」が表示されてしまう
	// それを防止するためのフラグ
	private Boolean initialized;

	// 予約対象の曲の情報（URL パラメーターで指定された元の情報）
	private AvailableSong? availableSong;

	// 予約情報（送信する情報）
	private RequestSong requestSong = new();

	// 予約者名一覧
	private String[] userNames = new String[0];

	// 予約結果メッセージ
	private String? requestResult;

	// 要素参照用
	private ElementReference inputUser;

	// 多重フォーカス防止用
	private Boolean focused;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 有効な状態で検索ボタンクリック
	// --------------------------------------------------------------------
	private async Task OnOK()
	{
		try
		{
			HttpResponseMessage message = await RequestSongService.AddRequestAsync(requestSong);
			if (!message.IsSuccessStatusCode)
			{
				requestResult = "予約できませんでした。やり直してください。";
				StateHasChanged();
				return;
			}
			NavigationManager.NavigateTo("/");
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

}
