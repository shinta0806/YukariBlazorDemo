@page "/requestform/{AvailableSongId?}"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject RequestSongService RequestSongService
@inject SearchService SearchService

<h1>予約</h1>

<div class="content">

	<div class="requestform">
		<EditForm Model="requestSong" OnValidSubmit="OnOK">

			<DataAnnotationsValidator />

			<div class="tab-content">

				<table class="input-table">
					<tr>
						<td class="input-td">サムネイル</td>
						<td class="input-td"><img src="/api/thumbnail/@Uri.EscapeDataString(requestSong.AvailableSongId)" /></td>
					</tr>
					<tr>
						<td class="input-td">曲名</td>
						<td class="input-td"><div class="req-list-song">@requestSong.SongName</div></td>
					</tr>
					<tr>
						<td class="input-td">タイアップ名</td>
						<td class="input-td">@requestSong.TieUpName</td>
					</tr>
					<tr>
						<td class="input-td">歌手名</td>
						<td class="input-td">@requestSong.ArtistName</td>
					</tr>
					<tr>
						<td class="input-td">制作会社</td>
						<td class="input-td">@requestSong.Maker</td>
					</tr>
					<tr>
						<td class="input-td">カラオケ動画制作者</td>
						<td class="input-td">@requestSong.Worker</td>
					</tr>
					<tr>
						<td class="input-td">ファイル名</td>
						<td class="input-td"><div class="req-list-path">@requestSong.Path</div></td>
					</tr>
					<tr>
						<td class="input-td">予約者</td>
						<td class="input-td"><input class="input-general" id="user" type="text" @bind="requestSong.User" @ref="inputUser" /></td>
					</tr>
					<tr>
						<td class="input-td">コメント</td>
						<td class="input-td"><input class="input-general" type="text" @bind="requestSong.Comment" /></td>
					</tr>
				</table>

			</div>

			<div class="actions">
				<button class="default-button">予約</button>
			</div>

			<div class="error-message">
				<ValidationSummary></ValidationSummary>
			</div>

		</EditForm>

		<div>@requestResult</div>

	</div>

</div>

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 予約する曲の ID
	[Parameter]
	public String? AvailableSongId { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 描画が完了した
	// --------------------------------------------------------------------
	protected override async Task OnAfterRenderAsync(Boolean firstRender)
	{
		try
		{
			if (firstRender)
			{
				await inputUser.FocusAsync();
			}
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			availableSong = await SearchService.SearchByIdAsync(AvailableSongId);
			if (availableSong == null)
			{
				return;
			}
			ClientCommon.CopySongProperty(availableSong, requestSong);
			requestSong.AvailableSongId = availableSong.Id;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// 予約対象の曲の情報（URL パラメーターで指定された元の情報）
	private AvailableSong? availableSong;

	// 予約情報（送信する情報）
	private RequestSong requestSong = new();

	// 予約結果メッセージ
	private String? requestResult;

	// 要素参照用
	private ElementReference inputUser;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 有効な状態で検索ボタンクリック
	// --------------------------------------------------------------------
	private async Task OnOK()
	{
		try
		{
			HttpResponseMessage message = await RequestSongService.AddRequestAsync(requestSong);
			if (!message.IsSuccessStatusCode)
			{
				requestResult = "予約できませんでした。やり直してください。";
				StateHasChanged();
				return;
			}
			NavigationManager.NavigateTo("/");
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

}
