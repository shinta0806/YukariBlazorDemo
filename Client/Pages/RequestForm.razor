@page "/requestform/{AvailableSongId?}"
@inject NavigationManager NavigationManager
@inject RequestSongService RequestSongService
@inject SearchService SearchService
@inject IJSRuntime JSRuntime

<h1>予約</h1>

<div class="content">

	<div class="requestform">
		<EditForm Model="requestSong" OnValidSubmit="OnOK">

			<DataAnnotationsValidator />

			<div class="tab-content">

				<table class="input-table">
					<tr>
						<td class="input-td">曲名</td>
						<td class="input-td"><div class="req-list-song">@requestSong.SongName</div></td>
					</tr>
					<tr>
						<td class="input-td">タイアップ名</td>
						<td class="input-td">@requestSong.TieUpName</td>
					</tr>
					<tr>
						<td class="input-td">歌手名</td>
						<td class="input-td">@requestSong.ArtistName</td>
					</tr>
					<tr>
						<td class="input-td">制作会社</td>
						<td class="input-td">@requestSong.Maker</td>
					</tr>
					<tr>
						<td class="input-td">カラオケ動画制作者</td>
						<td class="input-td">@requestSong.Worker</td>
					</tr>
					<tr>
						<td class="input-td">ファイル名</td>
						<td class="input-td"><div class="req-list-path">@requestSong.Path</div></td>
					</tr>
					<tr>
						<td class="input-td">予約者</td>
						<td class="input-td"><input class="input-general" id="user" type="text" @bind="requestSong.User" /></td>
					</tr>
					<tr>
						<td class="input-td">コメント</td>
						<td class="input-td"><input class="input-general" type="text" @bind="requestSong.Comment" /></td>
					</tr>
				</table>

			</div>

			<div class="actions">
				<button class="default-button">予約</button>
			</div>

			<div class="error-message">
				<ValidationSummary></ValidationSummary>
			</div>

		</EditForm>

		<div>@requestResult</div>

	</div>

</div>

@code {
	[Parameter]
	public String? AvailableSongId { get; set; }

	private AvailableSong? availableSong;

	private RequestSong requestSong = new();

	private String? requestResult;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			availableSong = await SearchService.SearchByIdAsync(AvailableSongId);
			if (availableSong == null)
			{
				return;
			}
			ClientCommon.CopySongProperty(availableSong, requestSong);
		}
		catch (Exception excep)
		{
			Debug.WriteLine(excep.Message);
			Debug.WriteLine(excep.StackTrace);
		}
	}

	protected override async Task OnAfterRenderAsync(Boolean firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("MySetFocus2", "user");
		}
	}

	private async void OnOK()
	{
		try
		{
			HttpResponseMessage message = await RequestSongService.RequestAsync(requestSong);
			if (!message.IsSuccessStatusCode)
			{
				requestResult = "予約できませんでした。やり直してください。";
				StateHasChanged();
				return;
			}
			NavigationManager.NavigateTo("/");
		}
		catch (Exception)
		{
		}
	}

}
