@page "/mypage/{Message?}"
@using System.IO
@inject AuthService AuthService
@inject SearchService SearchService

<AuthorizeView>
	<Authorized>
		@if (userInfo != null)
		{
			<h1>プロフィール</h1>
			<div class="content">

				<div class="ok-message">@Message</div>
				<div class="v-space"></div>
				<div class="tab-content">
					<table class="input-table">
						<tr>
							<td class="input-td">画像</td>
							<td class="input-td">
								<img src="/@(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_PUBLIC + YbdConstants.URL_THUMBNAIL + userInfo.Id)" />
							</td>
							<td class="input-td"><a href="/changeuserthumbnail/">変更</a></td>
						</tr>
						<tr>
							<td class="input-td">お名前：</td>
							<td class="input-td">@userInfo.Name</td>
							<td class="input-td">
								@if (!userInfo.IsAdmin)
								{
									<a href="/changeusername/">変更</a>
								}
							</td>
						</tr>
						<tr>
							<td class="input-td">パスワード：</td>
							<td class="input-td">-</td>
							<td class="input-td"><a href="/changeuserpassword/">変更</a></td>
						</tr>
					</table>
				</div>

			</div>

			<h1>マイ履歴</h1>
			<div class="content">

				@if (numHistories > 0)
				{
					<div>曲名をクリックして予約できます。</div>
					<table class="req-list-table">
						<tr class="req-list-tr">
							<th class="req-list-th">サムネイル</th>
							<th class="req-list-th">曲名</th>
							<th class="req-list-th">予約日</th>
						</tr>
						@foreach (HistorySong historySong in historySongs)
						{
							<tr class="req-list-tr-unplayed" @key="historySong.HistorySongId">
								<td class="req-list-td"><div class="req-list-thumb"><img src="/@(YbdConstants.URL_API + YbdConstants.URL_MOVIE + YbdConstants.URL_THUMBNAIL + Uri.EscapeDataString(historySong.AvailableSongId))" /></div></td>
								<td class="req-list-td" @onclick="() => OnClickRequestAsync(historySong)">
									@((MarkupString)ClientCommon.GenerateSongInfo(historySong))
								</td>
								<td class="req-list-td"><div class="req-list-misc">@YbdCommon.ModifiedJulianDateToDateTime(historySong.RequestTime).ToString("yyyy/MM/dd")</div></td>
							</tr>
						}
					</table>
					<div class="error-message">@historyResult</div>
				}
				else
				{
					<div>マイ履歴がありません。</div>
				}

			</div>
		}
		else
		{
			<div class="loading">Loading...</div>
		}
	</Authorized>
	<NotAuthorized>
		<div class="content">
			<div>ログアウトしました。</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 認証状態
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	// メッセージ
	[Parameter]
	public String? Message { get; set; }

	// ====================================================================
	// public 関数
	// ====================================================================

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			// トークンを更新することにより AuthenticationStateTask に反映させる
			await AuthService.ExtendAsync();

			userInfo = AuthService.GetLoginUserInfo();
			(_, historySongs, numHistories) = await AuthService.GetLoginUserHistories();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// ログインしているユーザーの情報
	private PublicUserInfo? userInfo;

	// 予約履歴
	private HistorySong[] historySongs = Array.Empty<HistorySong>();

	// 予約履歴の総数
	private Int32 numHistories;

	// 予約履歴の結果
	private String? historyResult;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 予約リンククリック
	// --------------------------------------------------------------------
	private async Task OnClickRequestAsync(HistorySong historySong)
	{
		try
		{
			AvailableSong? availableSong;
			(historyResult, availableSong) = await SearchService.SearchByHistoryAsync(historySong);
			if(availableSong == null)
			{
				StateHasChanged();
				return;
			}

			NavigationManager.NavigateTo($"/requestform/{availableSong.Id}");
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}
}
