@page "/mypage"
@inject AuthService AuthService
@inject HttpClient HttpClient

<AuthorizeView>
	<NotAuthorized>
		<div class="content">
			<div>ログアウトしました。</div>
		</div>
	</NotAuthorized>
	<Authorized>

		<h1>プロフィール</h1>
		<div class="content">

			<div class="tab-content">
				<table class="input-table">
					<tr>
						<td class="input-td">画像</td>
						<td class="input-td">
							<img src="/@(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_PUBLIC_USER_THUMBNAIL + userInfo?.Id)" />
						</td>
						<td class="input-td"><a href="/changeuserthumbnail/">変更</a></td>
					</tr>
					<tr>
						<td class="input-td">お名前：</td>
						<td class="input-td">@userInfo?.Name</td>
					</tr>
				</table>
			</div>

		</div>

	</Authorized>
</AuthorizeView>

<h3>MyPage</h3>

<div>[status] @status</div>
<div>[test1] @test</div>
<div>[test2] @test2</div>


@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 認証状態
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			userInfo = AuthService.GetLoginUserInfo();





			try
			{
				//status = await HttpClient.GetFromJsonAsync<String>(YbdConstants.URL_API +YbdConstants.URL_REQUEST_SONGS + YbdConstants.URL_STATUS);
				status = await HttpClient.GetFromJsonAsync<String>(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_STATUS);
				if (status == null)
				{
					status = "cannot get";
				}
			}
			catch (Exception)
			{
				status = "cannot connect";
			}
			try
			{
				test = await HttpClient.GetFromJsonAsync<String>(YbdConstants.URL_API + YbdConstants.URL_AUTH + "test/");
			}
			catch (Exception)
			{
				await AuthService.LogoutAsync();
				test = "cannot connect";
			}
			try
			{
				test2 = await HttpClient.GetFromJsonAsync<String>(YbdConstants.URL_API + YbdConstants.URL_AUTH + "test2/" + Environment.TickCount);
			}
			catch (Exception)
			{
				test2 = "cannot connect";
			}
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// ログインしているユーザーの情報
	private PublicUserInfo? userInfo;

	// ====================================================================
	// private 関数
	// ====================================================================
























	private String? status;

	private String? test;

	private String? test2;


}
