@page "/mypage/{Message?}"
@inject AuthService AuthService

<AuthorizeView>
	<Authorized>
		@if (userInfo != null)
		{
			<h1>プロフィール</h1>
			<div class="content">

				<div class="ok-message">@Message</div>
				<div class="v-space"></div>
				<div class="tab-content">
					<table class="input-table">
						<tr>
							<td class="input-td">画像</td>
							<td class="input-td">
								<img src="/@(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_PUBLIC + YbdConstants.URL_THUMBNAIL + userInfo.Id)" />
							</td>
							<td class="input-td"><a href="/changeuserthumbnail/">変更</a></td>
						</tr>
						<tr>
							<td class="input-td">お名前：</td>
							<td class="input-td">@userInfo.Name</td>
							<td class="input-td"><a href="/changeusername/">変更</a></td>
						</tr>
						<tr>
							<td class="input-td">パスワード：</td>
							<td class="input-td">-</td>
							<td class="input-td"><a href="/changeuserpassword/">変更</a></td>
						</tr>
					</table>
				</div>

			</div>
		}
		else
		{
			<div class="loading">Loading...</div>
		}
	</Authorized>
	<NotAuthorized>
		<div class="content">
			<div>ログアウトしました。</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 認証状態
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	// メッセージ
	[Parameter]
	public String? Message { get; set; }

	// ====================================================================
	// public 関数
	// ====================================================================

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			// トークンを更新することにより AuthenticationStateTask に反映させる
			await AuthService.ExtendAsync();

			userInfo = AuthService.GetLoginUserInfo();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// ログインしているユーザーの情報
	private PublicUserInfo? userInfo;
}
