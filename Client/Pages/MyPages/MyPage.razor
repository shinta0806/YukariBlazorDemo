@page "/mypage/{Message?}"
@using System.IO
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject SearchService SearchService

<AuthorizeView>
	<Authorized>
		@if (userInfo != null)
		{
			<ul>
				<li><span class="link" onclick="ScrollToElement('profile')">プロフィール</span></li>
				<li><span class="link" onclick="ScrollToElement('stock')">後で歌う予定リスト</span></li>
				<li><span class="link" onclick="ScrollToElement('history')">マイ履歴</span></li>
			</ul>

			<h1 id="profile">プロフィール</h1>
			<div class="content">

				<div class="ok-message">@Message</div>
				<div class="v-space"></div>
				<div class="tab-content">
					<table class="input-table">
						<tr>
							<td class="input-td">画像</td>
							<td class="input-td">
								<img src="/@(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_PUBLIC + YbdConstants.URL_THUMBNAIL + userInfo.Id)" />
							</td>
							<td class="input-td"><a href="/changeuserthumbnail/">変更</a></td>
						</tr>
						<tr>
							<td class="input-td">お名前：</td>
							<td class="input-td">@userInfo.Name</td>
							<td class="input-td">
								@if (!userInfo.IsAdmin)
								{
									<a href="/changeusername/">変更</a>
								}
							</td>
						</tr>
						<tr>
							<td class="input-td">パスワード：</td>
							<td class="input-td">-</td>
							<td class="input-td"><a href="/changeuserpassword/">変更</a></td>
						</tr>
					</table>
				</div>

			</div>

			<h1 id="stock">後で歌う予定リスト</h1>
			<div class="content">

				@if (numStocks > 0)
				{
					<div>曲名をクリックして予約できます。</div>
					<table class="req-list-table">
						<tr class="req-list-tr">
							<th class="req-list-th">サムネイル</th>
							<th class="req-list-th">曲名</th>
							<th class="req-list-th">登録日</th>
							<th class="req-list-th"><input type="checkbox" name="user" @onchange="OnChangeSelectAllStocks"></th>
						</tr>
						@foreach (StockSong stockSong in stockSongs)
						{
							<tr class="req-list-tr-unplayed" @key="stockSong.StockSongId">
								<td class="req-list-td"><div class="req-list-thumb"><img src="/@(YbdConstants.URL_API + YbdConstants.URL_MOVIE + YbdConstants.URL_THUMBNAIL + Uri.EscapeDataString(stockSong.AvailableSongId))" /></div></td>
								<td class="req-list-td" @onclick="() => OnClickStockAsync(stockSong)">
									@((MarkupString)ClientCommon.GenerateSongInfo(stockSong))
								</td>
								<td class="req-list-td"><div class="req-list-misc">@YbdCommon.ModifiedJulianDateToDateTime(stockSong.RequestTime).ToString("yyyy/MM/dd")</div></td>
								<td class="req-list-td"><input type="checkbox" name="stock" @bind="stockChecks[stockSong.StockSongId]"></td>
							</tr>
						}
					</table>

					<div class="actions">
						<button class="general-button" type="button" disabled="@isDeleteStockButtonDisabled" @onclick="OnClickDeleteStocksAsync">選択した曲を削除</button>
					</div>
				}
				else
				{
					<div>後で歌う予定リストがありません。</div>
				}
				<div>@((MarkupString)stockResult)</div>

			</div>

			<h1 id="history">マイ履歴</h1>
			<div class="content">

				@if (numHistories > 0)
				{
					<div>曲名をクリックして予約できます。</div>
					<table class="req-list-table">
						<tr class="req-list-tr">
							<th class="req-list-th">サムネイル</th>
							<th class="req-list-th">曲名</th>
							<th class="req-list-th">予約日</th>
						</tr>
						@foreach (HistorySong historySong in historySongs)
						{
							<tr class="req-list-tr-unplayed" @key="historySong.HistorySongId">
								<td class="req-list-td"><div class="req-list-thumb"><img src="/@(YbdConstants.URL_API + YbdConstants.URL_MOVIE + YbdConstants.URL_THUMBNAIL + Uri.EscapeDataString(historySong.AvailableSongId))" /></div></td>
								<td class="req-list-td" @onclick="() => OnClickHistoryAsync(historySong)">
									@((MarkupString)ClientCommon.GenerateSongInfo(historySong))
								</td>
								<td class="req-list-td"><div class="req-list-misc">@YbdCommon.ModifiedJulianDateToDateTime(historySong.RequestTime).ToString("yyyy/MM/dd")</div></td>
							</tr>
						}
					</table>

					<div class="actions">
						<button class="general-button" type="button" @onclick="OnClickDeleteAllHistoriesAsync">マイ履歴をすべて削除</button>
					</div>
				}
				else
				{
					<div>マイ履歴がありません。</div>
				}
				<div>@((MarkupString)historyResult)</div>

			</div>
		}
		else
		{
			<div class="loading">Loading...</div>
		}
	</Authorized>
	<NotAuthorized>
		<div class="content">
			<div>ログアウトしました。</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 認証状態
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	// メッセージ
	[Parameter]
	public String? Message { get; set; }

	// ====================================================================
	// public 関数
	// ====================================================================

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			// AuthService の状態を更新（更新しないとリロード時に userInfo を取得できない）
			await AuthService.ExtendAsync();
			userInfo = AuthService.GetLoginUserInfo();

			// 後で歌う予定リスト
			await UpdateStocksAsync();

			// マイ履歴
			await UpdateHistoriesAsync();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// ログインしているユーザーの情報
	private PublicUserInfo? userInfo;

	// 後で歌う予定リスト
	private StockSong[] stockSongs = Array.Empty<StockSong>();

	// 後で歌う予定リストの総数
	private Int32 numStocks;

	// 後で歌う予定リストチェック <StockSong.StockSongId, チェックされているか>
	private Dictionary<Int32, Boolean> stockChecks = new();

	// 後で歌う予定リスト削除ボタン無効化
	private Boolean isDeleteStockButtonDisabled;

	// 後で歌う予定リストの結果
	private String stockResult = String.Empty;

	// 予約履歴
	private HistorySong[] historySongs = Array.Empty<HistorySong>();

	// 予約履歴の総数
	private Int32 numHistories;

	// 予約履歴の結果
	private String historyResult = String.Empty;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// すべての後で歌う予定リストを選択チェックボックス変更
	// --------------------------------------------------------------------
	private void OnChangeSelectAllStocks(ChangeEventArgs e)
	{
		Boolean check = (Boolean?)e.Value ?? false;
		foreach (Int32 key in stockChecks.Keys)
		{
			stockChecks[key] = check;
		}
	}

	// --------------------------------------------------------------------
	// マイ履歴をすべて削除ボタンクリック
	// --------------------------------------------------------------------
	private async Task OnClickDeleteAllHistoriesAsync()
	{
		try
		{
			// 前回のエラーをクリア
			historyResult = String.Empty;
			StateHasChanged();

			// 確認
			Boolean confirm = await ClientCommon.ConfirmAsync(JSRuntime, "マイ履歴をすべて削除してもよろしいですか？");
			if (!confirm)
			{
				return;
			}

			// 削除
			String errorMessage = await AuthService.DeleteHistoriesAllAsync();
			historyResult = ClientCommon.ResultHtml("削除しました。", errorMessage);

			// マイ履歴更新
			await UpdateHistoriesAsync();

			StateHasChanged();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 選択した後で歌う予定リストを削除ボタンクリック
	// --------------------------------------------------------------------
	private async Task OnClickDeleteStocksAsync()
	{
		try
		{
			// 前回のエラーをクリア
			stockResult = String.Empty;
			StateHasChanged();

			// 確認
			Int32 numChecks = stockChecks.Where(x => x.Value).Count();
			if (numChecks == 0)
			{
				stockResult = ClientCommon.ResultHtml(String.Empty, "削除したい曲を選択してください。");
				StateHasChanged();
				return;
			}
			Boolean confirm = await ClientCommon.ConfirmAsync(JSRuntime, "選択した曲を後で歌う予定リストから削除してもよろしいですか？");
			if (!confirm)
			{
				return;
			}

			// 曲削除
			isDeleteStockButtonDisabled = true;
			StateHasChanged();
			String errorMessage = String.Empty;
			foreach (KeyValuePair<Int32, Boolean> stockCheck in stockChecks.Where(x => x.Value))
			{
				errorMessage += await AuthService.DeleteStockAsync(stockCheck.Key);
			}
			stockResult = ClientCommon.ResultHtml("削除しました。", errorMessage);

			// ユーザー一覧更新
			await UpdateStocksAsync();

			isDeleteStockButtonDisabled = false;
			StateHasChanged();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 予約リンククリック
	// --------------------------------------------------------------------
	private async Task OnClickHistoryAsync(HistorySong historySong)
	{
		try
		{
			(String errorMessage, AvailableSong? availableSong) = await SearchService.SearchByHistoryAsync(historySong);
			if (availableSong == null)
			{
				historyResult = ClientCommon.ResultHtml(String.Empty, errorMessage);
				StateHasChanged();
				return;
			}

			NavigationManager.NavigateTo($"/requestform/{availableSong.Id}");
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 予約リンククリック
	// --------------------------------------------------------------------
	private async Task OnClickStockAsync(StockSong stockSong)
	{
		try
		{
			HistorySong historySong = new();
			YbdCommon.CopyHistorySongProperty(stockSong, historySong);
			(String errorMessage, AvailableSong? availableSong) = await SearchService.SearchByHistoryAsync(historySong);
			if (availableSong == null)
			{
				stockResult = ClientCommon.ResultHtml(String.Empty, errorMessage);
				StateHasChanged();
				return;
			}

			NavigationManager.NavigateTo($"/requestform/{availableSong.Id}");
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// マイ履歴を更新
	// --------------------------------------------------------------------
	private async Task UpdateHistoriesAsync()
	{
		(_, historySongs, numHistories) = await AuthService.GetLoginUserHistories();
	}

	// --------------------------------------------------------------------
	// 後で歌う予定リストを更新
	// --------------------------------------------------------------------
	private async Task UpdateStocksAsync()
	{
		String errorMessage;
		(errorMessage, stockSongs, numStocks) = await AuthService.GetLoginUserStocks();
		stockResult = ClientCommon.ResultHtml(String.Empty, errorMessage);

		// チェック初期化
		stockChecks.Clear();
		foreach (StockSong stockSong in stockSongs)
		{
			stockChecks[stockSong.StockSongId] = false;
		}
	}
}
