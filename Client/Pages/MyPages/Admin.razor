@page "/admin"
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject RequestSongService RequestSongService

<AuthorizeView Roles="@ClientConstants.ROLE_NAME_ADMIN">
	<Authorized>
		<ul>
			<li><span class="link" onclick="ScrollToElement('request')">予約管理</span></li>
		</ul>

		<h1 id="request">予約管理</h1>
		<div class="content">

			<div class="actions">
				<button class="general-button" type="button" @onclick="OnClickDeleteAllRequestsAsync">予約をすべて削除</button>
			</div>
			<div>@((MarkupString)deleteAllRequestsResult)</div>

		</div>

		<h1 id="user">ユーザー管理</h1>
		<div class="content">

			@if (userInfos.Length > 0)
			{
				<form>
					<table class="req-list-table">
						<tr class="req-list-tr">
							<th class="req-list-th">削除</th>
							<th class="req-list-th">名前</th>
							<th class="req-list-th">最終ログイン日時</th>
							<th class="req-list-th">登録更新日時</th>
						</tr>
						@foreach (PublicUserInfo userInfo in userInfos)
						{
							<tr class="req-list-tr-unplayed" @key="@userInfo.Id">
								<td class="req-list-td"><input type="checkbox" name="user" @bind="userChecks[userInfo.Id]"></td>
								<td class="req-list-td">
									<span class="v-center"><img class="user-thumbnail" src="/@(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_PUBLIC + YbdConstants.URL_THUMBNAIL + userInfo.Id)" /></span>
									<span class="v-center">@userInfo.Name</span>
								</td>
								<td class="req-list-td">@YbdCommon.ModifiedJulianDateToDateTime(userInfo.LastLogin).ToLocalTime().ToString(ClientConstants.DATE_TIME_FORMAT)</td>
								<td class="req-list-td">@YbdCommon.ModifiedJulianDateToDateTime(userInfo.LastModified).ToLocalTime().ToString(ClientConstants.DATE_TIME_FORMAT)</td>
							</tr>
						}
					</table>

					<div class="actions">
						<button class="general-button" type="button" @onclick="OnClickDeleteUsersAsync">選択したユーザーを削除</button>
					</div>
					<div>@((MarkupString)deleteUsersResult)</div>
				</form>
			}
			else
			{
				<div>管理者以外のユーザーが登録されていません。</div>
			}

		</div>

	</Authorized>
	<NotAuthorized>
		<div class="content">
			<div>管理者専用です。</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 認証状態
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await UpdateUserInfosAsync();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// 予約をすべて削除の結果
	private String deleteAllRequestsResult = String.Empty;

	// ユーザー一覧
	private PublicUserInfo[] userInfos = new PublicUserInfo[0];

	// ユーザーの総数
	private Int32 numUsers;

	// ユーザーチェック
	private Dictionary<String, Boolean> userChecks = new();

	// ユーザーを削除の結果
	private String deleteUsersResult = String.Empty;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 予約をすべて削除ボタンクリック
	// --------------------------------------------------------------------
	private async Task OnClickDeleteAllRequestsAsync()
	{
		try
		{
			// 前回のエラーをクリア
			deleteAllRequestsResult = String.Empty;
			StateHasChanged();

			// 確認
			Boolean confirm = await ClientCommon.ConfirmAsync(JSRuntime, "予約をすべて削除してもよろしいですか？");
			if (!confirm)
			{
				return;
			}

			// 削除
			String errorMessage = await RequestSongService.DeleteRequestSongAllAsync();
			deleteAllRequestsResult = ResultHtml("削除しました。", errorMessage);
			StateHasChanged();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 選択したユーザーを削除ボタンクリック
	// --------------------------------------------------------------------
	private async Task OnClickDeleteUsersAsync()
	{
		try
		{
			// 前回のエラーをクリア
			deleteUsersResult = String.Empty;
			StateHasChanged();

			// 確認
			Int32 numChecks = userChecks.Where(x => x.Value).Count();
			if (numChecks == 0)
			{
				deleteUsersResult = ResultHtml(String.Empty, "削除したいユーザーを選択してください。");
				StateHasChanged();
				return;
			}
			String confirmMessage;
			if (numChecks == 1)
			{
				String checkedUserId = userChecks.First(x => x.Value).Key;
				confirmMessage = "「" + userInfos.First(x => x.Id == checkedUserId).Name + "」さんを削除してもよろしいですか？";
			}
			else
			{
				confirmMessage = numChecks.ToString() + " 人のユーザーを削除してもよろしいですか？";
			}
			Boolean confirm = await ClientCommon.ConfirmAsync(JSRuntime, confirmMessage);
			if (!confirm)
			{
				return;
			}

			String errorMessage = String.Empty;
			foreach (KeyValuePair<String, Boolean> userCheck in userChecks.Where(x => x.Value))
			{
				errorMessage += await AuthService.DeleteUserAsync(userCheck.Key);
			}
			deleteUsersResult = ResultHtml("削除しました。", errorMessage);

			// ユーザー一覧更新
			await UpdateUserInfosAsync();
			StateHasChanged();
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// --------------------------------------------------------------------
	// 結果表示用 HTML
	// --------------------------------------------------------------------
	private String ResultHtml(String okMessage, String errorMessage)
	{
		if (String.IsNullOrEmpty(errorMessage))
		{
			// OK
			return "<div class='ok-message'>" + okMessage + "</div>";
		}
		else
		{
			// エラー
			return "<div class='error-message'>" + errorMessage + "</div>";
		}
	}

	// --------------------------------------------------------------------
	// ユーザー一覧を更新
	// --------------------------------------------------------------------
	private async Task UpdateUserInfosAsync()
	{
		(userInfos, numUsers) = await AuthService.GetUsersAsync();

		// チェック初期化
		userChecks.Clear();
		foreach (PublicUserInfo userInfo in userInfos)
		{
			userChecks[userInfo.Id] = false;
		}
	}

}
