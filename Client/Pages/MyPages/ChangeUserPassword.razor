@page "/changeuserpassword"
@inject AuthService AuthService

<AuthorizeView>
	<Authorized>
		<h1>パスワードの変更</h1>
		<div class="content">

			<table class="input-table">
				<tr>
					<td class="input-td">現在のパスワード</td>
					<td class="input-td"><input class="input-general" type="password" @bind="currentPassword" @ref="inputCurrentPassword" /></td>
				</tr>
				<tr>
					<td class="input-td"></td>
					<td class="input-td"><hr /></td>
				</tr>
				<tr>
					<td class="input-td">新しいパスワード</td>
					<td class="input-td"><input class="input-general" type="password" @bind="newPassword" /></td>
				</tr>
				<tr>
					<td class="input-td">確認のため新しいパスワードを再度入力</td>
					<td class="input-td"><input class="input-general" type="password" @bind="confirmNewPassword" /></td>
				</tr>
			</table>

			<div class="actions">
				<button class="default-button" type="button" @onclick="OnClickChangeUserPasswordAsync">変更</button>
			</div>
			<div class="error-message">@changePasswordResult</div>

		</div>
	</Authorized>
	<NotAuthorized>
		<div class="content">
			<div>ログアウトしました。</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 認証状態
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 描画が完了した
	// --------------------------------------------------------------------
	protected override async Task OnAfterRenderAsync(Boolean firstRender)
	{
		try
		{
			if (prevFocused)
			{
				return;
			}

			await inputCurrentPassword.FocusAsync();
			prevFocused = true;
		}
		catch (Exception excep)
		{
			ClientCommon.NavigateToClientFatalError(NavigationManager, excep);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// 多重フォーカス当て防止用（URL パラメーターが無いため Boolean）
	private Boolean prevFocused;

	// 現在のパスワード
	private String? currentPassword;

	// 新しいパスワード
	private String? newPassword;

	// パスワード再入力
	private String? confirmNewPassword;

	// 要素参照用
	private ElementReference inputCurrentPassword;

	// 結果
	private String? changePasswordResult;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// パスワード変更ボタンがクリックされた
	// --------------------------------------------------------------------
	private async Task OnClickChangeUserPasswordAsync()
	{
		try
		{
			if (String.IsNullOrEmpty(currentPassword))
			{
				throw new Exception("現在のパスワードを入力してください。");
			}
			if (String.IsNullOrEmpty(newPassword))
			{
				throw new Exception("新しいパスワードを入力してください。");
			}
			if (String.IsNullOrEmpty(confirmNewPassword))
			{
				throw new Exception("確認のため新しいパスワードを再度入力してください。");
			}
			if (newPassword != confirmNewPassword)
			{
				throw new Exception("確認のためのパスワードが新しいパスワードと異なっています。");
			}
			String setResult = await AuthService.SetPasswordAsync(currentPassword, newPassword);
			if (!String.IsNullOrEmpty(setResult))
			{
				throw new Exception(setResult);
			}

			// トークンを更新することにより AuthenticationStateTask に反映させる
			await AuthService.ExtendAsync();
			NavigationManager.NavigateTo("/mypage/" + Uri.EscapeDataString("パスワードを変更しました。次回ログイン時は、新しいパスワードでログインしてください。"));
		}
		catch (Exception excep)
		{
			changePasswordResult = excep.Message;
			StateHasChanged();
		}
	}
}