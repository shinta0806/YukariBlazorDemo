@inherits LayoutComponentBase
@using System.IO
@using System.Net.Http.Headers
@using System.Security.Claims
@inject AuthService AuthService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<header>
	<div class="header-item"><NavLink class="header-link" ActiveClass="active" href="/" Match="NavLinkMatch.All">予約一覧</NavLink></div>
	<div class="header-item"><NavLink class="header-link" href="/searchform">検索</NavLink></div>
	<div class="header-item"><NavLink class="header-link" href="/player">Player</NavLink></div>
	<div class="header-item"><NavLink class="header-link" href="/info">情報</NavLink></div>
	<div class="header-item">
	</div>
	<div class="header-item-dropdown">
		<button class="dropdown-button" id="login-button" onclick="OnClickDropdown(this)">
			<img class="user-thumbnail" src="/@(YbdConstants.URL_API + YbdConstants.URL_AUTH + YbdConstants.URL_PUBLIC + YbdConstants.URL_THUMBNAIL + id)" />
		</button>
		<div class="dropdown-menu">
			<AuthorizeView>
				<Authorized>
					<div class="dropdown-item" @onclick="@(x => OnClickLoginDropdownLink("/mypage"))">マイページ</div>
				</Authorized>
			</AuthorizeView>
			<AuthorizeView Roles="@ClientConstants.ROLE_NAME_ADMIN">
				<Authorized>
					<div class="dropdown-item" @onclick="@(x => OnClickLoginDropdownLink("/admin"))">管理ページ</div>
				</Authorized>
			</AuthorizeView>
			<AuthorizeView>
				<Authorized>
					<div class="dropdown-item" @onclick="@(x => OnClickLoginDropdownLink("/logout"))">ログアウト</div>
				</Authorized>
				<NotAuthorized>
					<div class="dropdown-item" @onclick="@(x => OnClickLoginDropdownLink(LoginUrl("register/")))">新規ユーザー登録</div>
					<div class="dropdown-item" @onclick="@(x => OnClickLoginDropdownLink(LoginUrl("login/")))">ログイン</div>
				</NotAuthorized>
			</AuthorizeView>
		</div>
	</div>
</header>

@Body

@code{

	// ====================================================================
	// public パラメーター
	// ====================================================================

	// 認証状態
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	// ====================================================================
	// public 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// イベントハンドラー：ログイン状態が変化した
	// --------------------------------------------------------------------
	public void LoginStateChanged()
	{
		ClientCommon.DebugWriteLine("LoginStateChanged() " + Environment.TickCount.ToString("#,0"));
		UpdateId();
	}

	// ====================================================================
	// protected 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// 初期化が完了した
	// --------------------------------------------------------------------
	protected override async Task OnInitializedAsync()
	{
		try
		{
			// イベントハンドラー設定
			if (!AuthService.SetStateChangedHandler(LoginStateChanged))
			{
				throw new Exception();
			}

			// トークンを更新することにより AuthenticationStateTask に反映させる
			await AuthService.ExtendAsync();
		}
		catch (Exception excep)
		{
			ClientCommon.DebugWriteLine("MainLayout OnInitializedAsync() 例外: " + excep.Message);
		}
	}

	// ====================================================================
	// private 変数
	// ====================================================================

	// ユーザー ID
	private String? id;

	// ====================================================================
	// private 関数
	// ====================================================================

	// --------------------------------------------------------------------
	// ログインリンクの URL
	// --------------------------------------------------------------------
	private String LoginUrl(String kind)
	{
		String redirect = NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length);
		String url = "/registerform/" + kind;
		if (!String.IsNullOrEmpty(redirect))
		{
			url += ClientConstants.LOGIN_PARAM_REDIRECT + "=" + Uri.EscapeDataString(redirect);
		}
		return url;
	}

	// --------------------------------------------------------------------
	// ログインドロップダウンメニューのリンクをクリック
	// --------------------------------------------------------------------
	private async Task OnClickLoginDropdownLink(String param)
	{
		await JSRuntime.InvokeVoidAsync("CloseLoginDropdown");
		NavigationManager.NavigateTo(param);
	}

	// --------------------------------------------------------------------
	// ログイン ID を最新の状態に更新
	// --------------------------------------------------------------------
	private void UpdateId()
	{
		id = AuthService.GetLoginUserInfo()?.Id;
		StateHasChanged();
	}

}
